<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.spring.dao.NoticeMapper" >
  <resultMap id="BaseResultMap" type="com.spring.model.Notice" >
    <id column="NOTICE_ID" property="noticeId" jdbcType="VARCHAR" />
    <result column="NOTICE_NAME" property="noticeName" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="USER_ID" property="userId" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.spring.model.Notice" extends="BaseResultMap" >
    <result column="CONTENT" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    NOTICE_ID, NOTICE_NAME, CREATE_TIME, USER_ID
  </sql>
  <sql id="Blob_Column_List" >
    CONTENT
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_notice
    where NOTICE_ID = #{noticeId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_notice
    where NOTICE_ID = #{noticeId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.spring.model.Notice" >
    insert into t_notice (NOTICE_ID, NOTICE_NAME, CREATE_TIME, 
      USER_ID, CONTENT)
    values (#{noticeId,jdbcType=VARCHAR}, #{noticeName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
      #{userId,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.spring.model.Notice" >
    insert into t_notice
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="noticeId != null" >
        NOTICE_ID,
      </if>
      <if test="noticeName != null" >
        NOTICE_NAME,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="content != null" >
        CONTENT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="noticeId != null" >
        #{noticeId,jdbcType=VARCHAR},
      </if>
      <if test="noticeName != null" >
        #{noticeName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.spring.model.Notice" >
    update t_notice
    <set >
      <if test="noticeName != null" >
        NOTICE_NAME = #{noticeName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        CONTENT = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where NOTICE_ID = #{noticeId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.spring.model.Notice" >
    update t_notice
    set NOTICE_NAME = #{noticeName,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      USER_ID = #{userId,jdbcType=INTEGER},
      CONTENT = #{content,jdbcType=LONGVARCHAR}
    where NOTICE_ID = #{noticeId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.spring.model.Notice" >
    update t_notice
    set NOTICE_NAME = #{noticeName,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      USER_ID = #{userId,jdbcType=INTEGER}
    where NOTICE_ID = #{noticeId,jdbcType=VARCHAR}
  </update>

  <select id="getAllMessageNotice" resultMap="BaseResultMap">
    SELECT * FROM t_notice
  </select>
</mapper>